library(matrixcalc)
ge_Wishart = function(n, Sigma){
# Generate a random sample from a W_d(sigma,n) distribution.
if(is.numeric(n) == F | length(n) > 1){      # Check that n and sigma satiesfy the assumptions needed.
return("n is not a number")
}
n = as.integer(n)
if(is.matrix(Sigma) == F){
return("Sigma is not a matrix")
}
if(isSymmetric(Sigma) == F){
return("Sigma is not symmetric")
}
if(matrixcalc::is.positive.definite(Sigma) == F){
return("Sigma is not positive definite")
}
d = nrow(Sigma)
if(n <= d+1){
return("error in dimension")                # Check the assumption mentioned in the question.
}
L = chol(Sigma)
# Obtain the Choleski factorization. Note that L is upper triangular.
TT = matrix(0, nrow = d, ncol = d)
# Create the matrix
for(i in 1:d){
#applied the algorithm on Statistical Computing with R, Page 80
TT[i,i] = sqrt(rchisq(1, n-i+1))
if(i > 1){
for(j in 1:(i-1)){
TT[i,j] = rnorm(1)
}
}
}
return(t(L) %*% TT %*% t(TT) %*% L)
}
Sigma = cbind(c(4,12,-16),c(12,37,-43),c(-16,-43,98))       # An example of Sigma
ge_Wishart(5,Sigma)       # Generate a random sample
help(chol)
chol(cbind(c(4,112,-16),c(12,37,-43),c(-16,-43,98)))
Sigma = cbind(c(4,12,-16),c(12,37,-43),c(-16,-43,98))       # An example of Sigma
ge_Wishart(5,Sigma)       # Generate a random sample
Sigma = cbind(c(4,12,-16),c(12,37,-43),c(-16,-43,98))       # An example of Sigma
ge_Wishart(5,Sigma)       # Generate a random sample
Sigma = cbind(c(4,12,-16),c(12,37,-43),c(-16,-43,98))       # An example of Sigma
ge_Wishart(5,Sigma)       # Generate a random sample
help("isSymmetric")
require(bootstrap)
k = ncol(scor)
names = colnames(scor)
par(mfrow = c(2, 3))
for(i in 1:(k-1)){
for(j in (i+1):k){
plot(scor[,i],scor[,j],sub = paste("correlation","=",cor(scor[,i],scor[,j])), xlab=paste(names[i]),ylab=paste(names[j]) )
}
}
library(bootstrap)
k = ncol(scor)
names = colnames(scor)
par(mfrow = c(2, 3))
for(i in 1:(k-1)){
for(j in (i+1):k){
plot(scor[,i],scor[,j],sub = paste("correlation","=",cor(scor[,i],scor[,j])), xlab=paste(names[i]),ylab=paste(names[j]) )
}
}
